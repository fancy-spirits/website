---
import SocialBar from "../components/SocialBar.astro";
import Card from "./Card.astro";
import { ArtistDetailed, Release } from "../Types";
import { AstroComponentFactory } from "astro/dist/runtime/server";

export interface Props {
    artist: ArtistDetailed,
};

const { artist } = Astro.props;
const backgroundColor = artist.backgroundColor;

const artistReleases = await Astro.glob<Release>("../contentData/releases/**/**.mdx").then(
    releases => releases.map(release => release.frontmatter).filter(release => release.artists.includes(artist.name)).filter(release => !(release as any).draft)
);

artistReleases.sort((release1, release2) => {
    const date1 = new Date(release1.releaseDate.year, release1.releaseDate.month, release1.releaseDate.day);
    const date2 = new Date(release2.releaseDate.year, release2.releaseDate.month, release2.releaseDate.day);
    return date2.getTime() - date1.getTime();
});

---


<style define:vars={{backgroundColor}}>

    .withBackground {
        background-color: var(--backgroundColor);
    }
    .artist-toggle img {
        background-image: url({artist.imageSrc});
        max-width: 5em;
        max-height: 5em;
        aspect-ratio: 1;
        border-radius: 50%;
        cursor: pointer;
        filter: saturate(50%);
        transition: 0.4s;
        border: solid 0.75px #dddddd;
    }

    .artist-toggle-a {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .artist-toggle-a:hover > img {
        filter: saturate(120%);
        border: solid 3px #222222;
    }

    div {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: auto 10em;
    }

    strong {
        text-align: center;
        font-weight: 500;
        display: block;
        margin-top: 0.5em;
        transition: 0.5s;
    }

    .artist-toggle-a:hover > strong {
        transform: scale(1.05);
        font-weight: 700;
    }

    .artist-details {
        display: none;
        visibility: hidden;
        transition: 1s;
        opacity: 0;
        transform: translateY(250px);
    }

    .active.artist-details {
        display: flex;
        align-items: stretch;
        visibility: visible;
        transition: 1s;
        grid-column: 1 / 4; 
        min-height: 10vh;
        opacity: 1;
        transform: translateY(0);
    }

    .artist-toggle {
        transition: 0.5s;
    }

    .artist-toggle:hover {
        transform: translateY(-0.75em);
    }

    .artist-toggle.active > .artist-toggle-a > img {
        filter: saturate(120%);
        border: solid 3px #222222;
    }

    .container-details {
        display: grid;
        min-height: 85%;
        min-width: 90%;

        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: max-content auto max-content;
        margin: 0.5em;
    }

    .container-details .artist-image-name {
        display: flex;
        grid-row: 1 / 2;
        grid-column: 1 / 4;
        justify-content: flex-start;
        max-width: 100%;
    }

    .container-details .artist-image-name img {
        border-radius: 50%;
        box-shadow: 0.15em 0.15em 1em rgba(0,0,0,0.25);
        width: 10em;
        aspect-ratio: 1;
        transition: 1s;
        cursor: pointer;
        animation: artist-image 0.75s ease-in-out 0s;
    }

    .container-details .artist-image-name img.artist-image-clicked {
        border-radius: 1em;
        transform: scale(150%, 150%);
    }

    @keyframes artist-image {
        0% {
            opacity: 0;
            transform: scale(0%);
        }

        100% {
            opacity: 1;
            transform: scale(100%);
        }
    }

    .container-details .artist-image-name h2 {
        display: block;
        margin-left: 0.75em;
        font-size: 2.75em;
        font-style: italic;
        font-weight: 300;
        animation: artist-name 1s ease-in-out 0s;
    }

    @keyframes artist-name {
        0% {
            opacity: 0;
            transform: translateX(5em);
        }

        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .container-details .artist-description {
        display: block;
        grid-row: 2 / 3;
        grid-column: 1 / 4;
        margin-top: 1.5em;
        animation: artist-description 1s ease-in-out 0s;
    }


    @keyframes artist-description {
        0% {
            opacity: 0;
            transform: translateY(5em);
            filter: blur(1em);
        }

        100% {
            opacity: 1;
            transform: translateY(0);
            filter: blur(0);
        }
    }

    .releases {
        display: grid;
        gap: 2em 0.5em;
        grid-template-columns: repeat(5, 1fr);
        grid-row: 3 / 4;
        grid-column: 1 / 4;
        margin-top: 2em;
        margin-bottom: 0.5em;
    }

    .releases .release-img {
        width: clamp(3em, 80%, 15em);
        aspect-ratio: 1;
        align-self: center;
        justify-self: center;
        border-radius: 0.75em;
        box-shadow: 0.15em 0.15em 0.5em rgba(0,0,0,0.45);
        transition: 0.5s;

        /* Animation default */
        transform: scale(0);
        opacity: 0;
        filter: blur(1em) saturate(0%);
    }

    .releases .release-img.visible {
        animation: releases 1s ease-in-out;
        /* animation: releases 1s ease-in calc(150ms * var(--release-index)); */
        transform: scale(1);
        opacity: 1;
        filter: blur(0) saturate(100%);
    }

    .releases .release-img-a {
        transition: 0.75s;
    }
    
    .releases .release-img-a:hover {
        transform: translateY(-0.75em);
    }

    .releases .release-img-a:hover .release-img {
        box-shadow: 0.15em 0.3em 0.5em rgba(0,0,0,0.5);
    }

    @keyframes releases {
        from {
            transform: scale(0);
            opacity: 0;
            filter: blur(1em) saturate(0%);
        }

        to {
            transform: scale(1);
            opacity: 1;
            filter: blur(0) saturate(100%);
        }
    }

    .container-details .artist-description p {
        line-height: 200%;
        font-weight: 300;
        padding-right: 1em;
        margin-top: 1em;
        margin-bottom: 1em;
    }

    .container-details .social-links {
        display: block;
        grid-row: 4 / 5;
        grid-column: 1 / 4;
        animation: artist-social 1.5s ease-in-out 0s;
        margin-top: 1.5em;
    }

    @keyframes artist-social {
        0% {
            opacity: 0;
            transform: translateY(5em);
            filter: blur(1em);
        }

        66% {
            opacity: 0;
            transform: translateY(2.5em);
        }

        100% {
            opacity: 1;
            transform: translateY(0);
            filter: blur(0);
        }
    }

    @media screen and (max-width: 800px) {
        .active.artist-details {
            grid-column: 1 / 3; 
        }

        .container-details .artist-image-name img {
            box-shadow: 0.15em 0.15em 1em rgba(0,0,0,0.25);
            width: 5em;
        }

        .container-details .artist-image-name h2 {
            margin-left: 1em;
            /* font-size: 170%; */
            font-size: 160%;
            max-width: 100%;
            overflow: hidden;
        }

        .releases {
            display: grid;
            gap: 2em 0.5em;
            grid-template-columns: repeat(3, 1fr);
            grid-row: 3 / 4;
            grid-column: 1 / 4;
            margin-top: 2em;
            margin-bottom: 0.5em;
        }
    }

    @media (prefers-reduced-motion: reduce), (max-width: 800px) {
        .container-details .artist-image-name img.artist-image-clicked {
            border-radius: 50%;
            transform: scale(100%, 100%);
        }

        .artist-toggle:hover {
            transform: translateY(0);
        }

        .container-details .artist-image-name img, 
        .container-details .social-links, 
        .releases .release-img, 
        .releases .release-img-a, 
        .container-details .artist-description, 
        .release-img,
        .container-details .artist-image-name h2 {
            animation: none !important;
        }

        .releases .release-img-a:hover {
            transform: translateY(0);
        }

        .releases .release-img-a:hover .release-img {
            box-shadow: 0.15em 0.15em 0.5em rgba(0,0,0,0.45);
        }
    }

    @media (prefers-color-scheme: dark) {
        .artist-toggle img {
            border: solid 0.75px #222222;
        }

        .artist-toggle-a:hover > img {
            border: solid 2px #eeeeee;
        }
        artist-toggle.active > .artist-toggle-a > img {
            border: solid 2px #eeeeee;
        }
    }
</style>

<style is:inline>
    .container-details .artist-description p {
        line-height: 200%;
        font-weight: 300;
        padding-right: 1em;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    } 
</style>

<div class="artist-toggle">
    <a class="artist-toggle-a">
        <img src={artist.imageSrc} alt={artist.name} class:list={[{withBackground: backgroundColor !== undefined}]}>
        <strong>{artist.name}</strong>
    </a>
</div>
<Card class="artist-details">
    <section id={`${artist.id}-artist`} class="container-details">
        <div class="artist-image-name">
            <img src={artist.imageSrc} alt={artist.name} class:list={[{withBackground: backgroundColor !== undefined}]}>
            <h2>{artist.name}</h2>
        </div>
        <div class="artist-description" set:html={artist.description}></div>
        <!-- <div class="artist-description"><p set:html={artist.description}></p></div> -->
        <div class="releases">
            {artistReleases.map((release, index) => <a class="release-img-a" href={`/releases#${release.id}-release`}><img class="release-img" style={`--release-index: ${index}`} src={release.imageSrc} /></a>)}
        </div>
        <section class="social-links">
            <SocialBar links={artist.links} before="Social Media"></SocialBar>
        </section>
    </section>
</Card>
<script>
    import {ClassWatcher} from "../../public/scripts/ClassWatcher";
    
    document.querySelectorAll<HTMLElement>(".artist-details")
        .forEach(container => {
            let image = container.querySelector(".artist-image-name img");
            image.addEventListener(
                "click",
                e => {
                    image.classList.toggle("artist-image-clicked");
                    e.stopPropagation();
                }
            );
            container.addEventListener(
                "click",
                () => image.classList.remove("artist-image-clicked")
            );
            new ClassWatcher(container, "active", () => image.classList.remove("artist-image-clicked"));

            const releaseImgs = container.querySelectorAll(".release-img");
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("visible");
                        return;
                    }
                })
            }, {
                threshold: 0.9,
                root: container
            });
            releaseImgs.forEach(img => observer.observe(img));
        });
</script>